// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApplication.Data;

#nullable disable

namespace WeatherApplication.Migrations
{
    [DbContext(typeof(WeatherdbContext))]
    partial class WeatherdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherApplication.Models.Locality", b =>
                {
                    b.Property<int>("LocalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("localityId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalityId"));

                    b.Property<string>("LocalityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("localityName");

                    b.HasKey("LocalityId")
                        .HasName("PK__locality__EBA257B25F0CDFA4");

                    b.HasIndex(new[] { "LocalityName" }, "UQ__locality__71FF7E86D93DE688")
                        .IsUnique();

                    b.ToTable("locality");
                });

            modelBuilder.Entity("WeatherApplication.Models.Weatherdatum", b =>
                {
                    b.Property<int>("WeatherdataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("weatherdataId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeatherdataId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("Day")
                        .HasColumnType("date")
                        .HasColumnName("day");

                    b.Property<int?>("LocalityId")
                        .HasColumnType("int")
                        .HasColumnName("localityId");

                    b.Property<decimal?>("Rainfall")
                        .HasColumnType("decimal(3, 1)")
                        .HasColumnName("rainfall");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(4, 1)")
                        .HasColumnName("temperature");

                    b.Property<int?>("WindSpeed")
                        .HasColumnType("int")
                        .HasColumnName("wind_speed");

                    b.HasKey("WeatherdataId")
                        .HasName("PK__weatherd__49831657EAC52DD9");

                    b.HasIndex("LocalityId");

                    b.ToTable("weatherdata");
                });

            modelBuilder.Entity("WeatherApplication.Models.Weatherdatum", b =>
                {
                    b.HasOne("WeatherApplication.Models.Locality", "Locality")
                        .WithMany("Weatherdata")
                        .HasForeignKey("LocalityId")
                        .HasConstraintName("FK__weatherda__local__2B3F6F97");

                    b.Navigation("Locality");
                });

            modelBuilder.Entity("WeatherApplication.Models.Locality", b =>
                {
                    b.Navigation("Weatherdata");
                });
#pragma warning restore 612, 618
        }
    }
}
